// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESSAGE_NW_H_
#define FLATBUFFERS_GENERATED_MESSAGE_NW_H_

#include "flatbuffers/flatbuffers.h"

namespace NW {

struct Vec2;

struct Message;

enum MessageType {
  MessageType_Init = 0,
  MessageType_Update = 1,
  MessageType_MIN = MessageType_Init,
  MessageType_MAX = MessageType_Update
};

inline const MessageType (&EnumValuesMessageType())[2] {
  static const MessageType values[] = {
    MessageType_Init,
    MessageType_Update
  };
  return values;
}

inline const char * const *EnumNamesMessageType() {
  static const char * const names[] = {
    "Init",
    "Update",
    nullptr
  };
  return names;
}

inline const char *EnumNameMessageType(MessageType e) {
  if (e < MessageType_Init || e > MessageType_Update) return "";
  const size_t index = static_cast<int>(e);
  return EnumNamesMessageType()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(2) Vec2 FLATBUFFERS_FINAL_CLASS {
 private:
  uint16_t row_;
  uint16_t column_;

 public:
  Vec2() {
    memset(this, 0, sizeof(Vec2));
  }
  Vec2(uint16_t _row, uint16_t _column)
      : row_(flatbuffers::EndianScalar(_row)),
        column_(flatbuffers::EndianScalar(_column)) {
  }
  uint16_t row() const {
    return flatbuffers::EndianScalar(row_);
  }
  uint16_t column() const {
    return flatbuffers::EndianScalar(column_);
  }
};
FLATBUFFERS_STRUCT_END(Vec2, 4);

struct Message FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_POS = 6
  };
  MessageType type() const {
    return static_cast<MessageType>(GetField<int8_t>(VT_TYPE, 0));
  }
  const Vec2 *pos() const {
    return GetStruct<const Vec2 *>(VT_POS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyField<Vec2>(verifier, VT_POS) &&
           verifier.EndTable();
  }
};

struct MessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(MessageType type) {
    fbb_.AddElement<int8_t>(Message::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_pos(const Vec2 *pos) {
    fbb_.AddStruct(Message::VT_POS, pos);
  }
  explicit MessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MessageBuilder &operator=(const MessageBuilder &);
  flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline flatbuffers::Offset<Message> CreateMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    MessageType type = MessageType_Init,
    const Vec2 *pos = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_pos(pos);
  builder_.add_type(type);
  return builder_.Finish();
}

inline const NW::Message *GetMessage(const void *buf) {
  return flatbuffers::GetRoot<NW::Message>(buf);
}

inline const NW::Message *GetSizePrefixedMessage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<NW::Message>(buf);
}

inline bool VerifyMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<NW::Message>(nullptr);
}

inline bool VerifySizePrefixedMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<NW::Message>(nullptr);
}

inline void FinishMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<NW::Message> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<NW::Message> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace NW

#endif  // FLATBUFFERS_GENERATED_MESSAGE_NW_H_
